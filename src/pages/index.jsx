import Head from "next/head";
import { useCallback, useContext, useEffect, useState } from "react";
import { Api } from "../services/Api";
import Link from "next/link";
import { Button } from "../components/Button";
import { InputText } from "../components/InputText";
import { ServiceDelete } from "../services/Cliente"
import { GlobalContext } from "@/contexts/GlobalContext";

export default function Home() {
  const [clients, setClients] = useState([]);
  const [allClients, setAllClients] = useState([]);

  const [page, setPage] = useState(0);
  const [listedclients, setListedclients] = useState(5);
  const [clientsPerPage] = useState(5);

  const [message, setMessage] = useState("");

  const [searchValue, setSearchValue] = useState('');

  const headers = {
    'header': {
      'Accepet': '*/*'
    }
  };

  const getClientes = useCallback(async (page, clientsPerPage) => {
    await Api.get(
      "/clientes"
    )
    .then((response) => {
      setClients(response.data.cliente.slice(page, clientsPerPage))
      setAllClients(response.data.cliente);
    }).catch((err) => {
      if (err.response){
        setMessage(err.response.data.message);
      } else {
        setMessage("Erro tente novamente mais tarde!");
      }
    });
  }, []);

  useEffect(() => {
    getClientes(0, clientsPerPage);
  }, [getClientes, clientsPerPage]);

  const loadMoreClients = () => {
    const nextPage = page + clientsPerPage;
    const nextClients = allClients.slice(nextPage, nextPage + clientsPerPage);
    clients.push(...nextClients);

    setClients(clients);
    setPage(nextPage);
    setListedclients(clients.length);
  }

  const handleChange = (e) => {
    const { value } = e.target;
    setSearchValue(value);
  }

  const noMoreClients = page + clientsPerPage >= allClients.length;

  const filteredClients = searchValue ?
  allClients.filter(cliente => {
      return cliente.nome.toLowerCase().includes(
        searchValue.toLowerCase()
      );
  })
  : clients;

  const excluirCliente = async (idCliente) => {
    if (window.confirm('Tem certeza que deseja apagar?')) {
        const response = await ServiceDelete('/clientes/' + idCliente);
        setMessage(response);
        getClientes(0, listedclients);
    }
  }

  const theContext = useContext(GlobalContext)
  console.log("Visualizar", theContext.visualizarHabilitado);

  console.log("NODE_ENV ", process.env.NODE_ENV);
  console.log("NEXT_PUBLIC_BACKEND_URL_API", process.env.NEXT_PUBLIC_BACKEND_URL_API);
  console.log("NEXT_PUBLIC_BACKEND_URL_API_PRD", process.env.NEXT_PUBLIC_BACKEND_URL_API_PRD);

  return (
    <>
      <Head>
      <title>Cadastro de Cliente</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Link href={"/cadastrar"}>
          <Button
            text="Cadastrar" 
          />
        </Link>
        <h2>Listar Clientes</h2>

        {message ? <p>{message}</p>:""}
        
        <div>
          {!!searchValue &&(
            <h2>Buscar cliente: {searchValue}</h2>
          )}
        </div>
        <InputText
          textValue={searchValue}
          handleChange={handleChange}
          placeholder="Digite o nome do cliente para buscar" 
        />

        <br /><br />

        {filteredClients.length > 0 && (
          filteredClients.map(cliente => (
            <div key={cliente.id}>
              <span>Nome: {cliente.nome}</span><br />
              <p>
                <Link href={`/visualizar/${cliente.id}`}>
                  <Button
                    text="Visualizar" 
                  />
                </Link>{" "}
                <Link href={`/editar/${cliente.id}`}>
                  <Button
                    text="Editar" 
                  />                  
                </Link>{" "}
                  <Button
                    text="Excluir"
                    onClick={() => excluirCliente(cliente.id)} 
                  />       
              </p>  
              <hr />
            </div>
          ))
        )}

        {filteredClients.length === 0 && (
          <p>Não existem clientes = {searchValue} </p>
        )}

        <br />

        {!searchValue && (
          <Button
            text="Carregar mais usuários"
            onClick={loadMoreClients}
            disabled={noMoreClients}
          />
        )}
      </main>
       
    </>
  );
}
